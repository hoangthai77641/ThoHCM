import React, { useState, useEffect } from 'react';
import axios from 'axios';
import WorkerAvailability from './WorkerAvailability';

const ServiceBooking = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    serviceDetails: {
      type: '',
      action: 'repair',
      brand: '',
      model: '',
      issueDescription: '',
      urgency: 'normal',
      photos: []
    },
    location: {
      district: '',
      ward: '',
      fullAddress: '',
      coordinates: null,
      accessInstructions: ''
    },
    scheduledTime: '',
    note: ''
  });
  
  const [priceEstimate, setPriceEstimate] = useState(null);
  const [availableWorkers, setAvailableWorkers] = useState([]);
  const [selectedWorker, setSelectedWorker] = useState(null);
  const [loading, setLoading] = useState(false);
  const [currentService, setCurrentService] = useState(null);

  const serviceTypes = [
    { value: 'air_conditioning', label: 'ƒêi·ªÅu h√≤a', icon: '‚ùÑÔ∏è' },
    { value: 'refrigerator', label: 'T·ªß l·∫°nh', icon: 'üßä' },
    { value: 'washing_machine', label: 'M√°y gi·∫∑t', icon: 'üëï' },
    { value: 'water_heater', label: 'M√°y n∆∞·ªõc n√≥ng', icon: 'üöø' },
    { value: 'electrical', label: 'ƒêi·ªán d√¢n d·ª•ng', icon: '‚ö°' }
  ];

  const districts = [
    'Qu·∫≠n 1', 'Qu·∫≠n 2', 'Qu·∫≠n 3', 'Qu·∫≠n 4', 'Qu·∫≠n 5', 'Qu·∫≠n 6', 'Qu·∫≠n 7', 'Qu·∫≠n 8',
    'Qu·∫≠n 9', 'Qu·∫≠n 10', 'Qu·∫≠n 11', 'Qu·∫≠n 12', 'Ph√∫ Nhu·∫≠n', 'B√¨nh Th·∫°nh', 'T√¢n B√¨nh',
    'T√¢n Ph√∫', 'G√≤ V·∫•p', 'Th·ªß ƒê·ª©c', 'B√¨nh Ch√°nh', 'H√≥c M√¥n', 'C·ªß Chi', 'Nh√† B√®'
  ];

  const urgencyOptions = [
    { value: 'normal', label: 'B√¨nh th∆∞·ªùng', desc: 'Trong 24h', fee: 'Kh√¥ng ph√≠' },
    { value: 'urgent', label: 'Kh·∫©n c·∫•p', desc: 'Trong 6h', fee: '+30%' },
    { value: 'emergency', label: 'C·∫•p c·ª©u', desc: 'Trong 2h', fee: '+50%' }
  ];

  // Get current location
  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setFormData(prev => ({
            ...prev,
            location: {
              ...prev.location,
              coordinates: [longitude, latitude]
            }
          }));
          
          // Reverse geocoding would go here to get district/ward
          // For now, just prompt user to select manually
        },
        (error) => {
          console.error('Geolocation error:', error);
          alert('Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i. Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán th·ªß c√¥ng.');
        }
      );
    }
  };

  // Get service data and price estimate
  useEffect(() => {
    if (formData.serviceDetails.type) {
      getServiceData();
    }
  }, [formData.serviceDetails.type]);

  useEffect(() => {
    if (formData.serviceDetails.type && formData.location.district) {
      getPriceEstimate();
    }
  }, [formData.serviceDetails.type, formData.location.district, formData.serviceDetails.urgency]);

  const getServiceData = async () => {
    try {
      const response = await axios.get(`/api/services/type/${formData.serviceDetails.type}`);
      setCurrentService(response.data);
    } catch (error) {
      console.error('Service data error:', error);
    }
  };

  const getPriceEstimate = async () => {
    try {
      const response = await axios.post('/api/enhanced/estimate', {
        serviceType: formData.serviceDetails.type,
        district: formData.location.district,
        urgency: formData.serviceDetails.urgency
      });
      
      setPriceEstimate(response.data.estimate);
    } catch (error) {
      console.error('Price estimate error:', error);
    }
  };

  // Find available workers
  const findWorkers = async () => {
    if (!formData.location.district || !formData.serviceDetails.type) return;
    
    setLoading(true);
    try {
      const response = await axios.post('/api/enhanced/workers/available', {
        location: formData.location,
        serviceDetails: formData.serviceDetails,
        urgency: formData.serviceDetails.urgency
      });
      
      setAvailableWorkers(response.data.workers);
    } catch (error) {
      console.error('Find workers error:', error);
      alert('Kh√¥ng th·ªÉ t√¨m th·ª£ trong khu v·ª±c');
    } finally {
      setLoading(false);
    }
  };

  // Book service
  const bookService = async () => {
    setLoading(true);
    try {
      const response = await axios.post('/api/enhanced/book', {
        ...formData,
        autoAssign: !selectedWorker,
        preferredWorker: selectedWorker?.id
      });
      
      alert('ƒê·∫∑t d·ªãch v·ª• th√†nh c√¥ng! ƒêang t√¨m th·ª£ ph√π h·ª£p...');
      // Redirect to tracking page
      window.location.href = `/booking/${response.data.booking.id}/track`;
    } catch (error) {
      console.error('Booking error:', error);
      alert('Kh√¥ng th·ªÉ ƒë·∫∑t d·ªãch v·ª•. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const nextStep = () => {
    if (step === 2) {
      findWorkers();
    }
    setStep(step + 1);
  };

  const prevStep = () => setStep(step - 1);

  return (
    <div className="service-booking">
      {/* Progress bar */}
      <div className="booking-progress">
        <div className={`step ${step >= 1 ? 'active' : ''}`}>1. D·ªãch v·ª•</div>
        <div className={`step ${step >= 2 ? 'active' : ''}`}>2. V·ªã tr√≠</div>
        <div className={`step ${step >= 3 ? 'active' : ''}`}>3. Th·ª£</div>
        <div className={`step ${step >= 4 ? 'active' : ''}`}>4. X√°c nh·∫≠n</div>
      </div>

      {/* Step 1: Service Details */}
      {step === 1 && (
        <div className="step-content">
          <h2>Ch·ªçn d·ªãch v·ª• c·∫ßn s·ª≠a ch·ªØa</h2>
          
          <div className="service-grid">
            {serviceTypes.map(service => (
              <div 
                key={service.value}
                className={`service-card ${formData.serviceDetails.type === service.value ? 'selected' : ''}`}
                onClick={() => setFormData(prev => ({
                  ...prev,
                  serviceDetails: { ...prev.serviceDetails, type: service.value }
                }))}
              >
                <div className="service-icon">{service.icon}</div>
                <div className="service-label">{service.label}</div>
              </div>
            ))}
          </div>

          <div className="form-group">
            <label>M√¥ t·∫£ v·∫•n ƒë·ªÅ</label>
            <textarea
              value={formData.serviceDetails.issueDescription}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                serviceDetails: { ...prev.serviceDetails, issueDescription: e.target.value }
              }))}
              placeholder="V√≠ d·ª•: ƒêi·ªÅu h√≤a kh√¥ng l·∫°nh, k√™u to..."
              rows={3}
              required
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>H√£ng</label>
              <input
                type="text"
                value={formData.serviceDetails.brand}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  serviceDetails: { ...prev.serviceDetails, brand: e.target.value }
                }))}
                placeholder="Samsung, LG, Panasonic..."
              />
            </div>
            <div className="form-group">
              <label>Model</label>
              <input
                type="text"
                value={formData.serviceDetails.model}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  serviceDetails: { ...prev.serviceDetails, model: e.target.value }
                }))}
                placeholder="N·∫øu bi·∫øt"
              />
            </div>
          </div>

          <div className="urgency-options">
            <h3>M·ª©c ƒë·ªô kh·∫©n c·∫•p</h3>
            {urgencyOptions.map(option => (
              <label key={option.value} className="urgency-option">
                <input
                  type="radio"
                  name="urgency"
                  value={option.value}
                  checked={formData.serviceDetails.urgency === option.value}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    serviceDetails: { ...prev.serviceDetails, urgency: e.target.value }
                  }))}
                />
                <div className="option-details">
                  <div className="option-title">{option.label}</div>
                  <div className="option-desc">{option.desc}</div>
                  <div className="option-fee">{option.fee}</div>
                </div>
              </label>
            ))}
          </div>

          <button 
            className="btn-primary" 
            onClick={nextStep}
            disabled={!formData.serviceDetails.type || !formData.serviceDetails.issueDescription}
          >
            Ti·∫øp theo
          </button>
        </div>
      )}

      {/* Step 2: Location */}
      {step === 2 && (
        <div className="step-content">
          <h2>ƒê·ªãa ch·ªâ d·ªãch v·ª•</h2>
          
          <button className="btn-secondary" onClick={getCurrentLocation}>
            üìç S·ª≠ d·ª•ng v·ªã tr√≠ hi·ªán t·∫°i
          </button>

          <div className="form-row">
            <div className="form-group">
              <label>Qu·∫≠n/Huy·ªán *</label>
              <select
                value={formData.location.district}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  location: { ...prev.location, district: e.target.value }
                }))}
                required
              >
                <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>
                {districts.map(district => (
                  <option key={district} value={district}>{district}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>Ph∆∞·ªùng/X√£</label>
              <input
                type="text"
                value={formData.location.ward}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  location: { ...prev.location, ward: e.target.value }
                }))}
                placeholder="Ph∆∞·ªùng/X√£"
              />
            </div>
          </div>

          <div className="form-group">
            <label>ƒê·ªãa ch·ªâ chi ti·∫øt *</label>
            <input
              type="text"
              value={formData.location.fullAddress}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                location: { ...prev.location, fullAddress: e.target.value }
              }))}
              placeholder="S·ªë nh√†, ƒë∆∞·ªùng, khu v·ª±c..."
              required
            />
          </div>

          <div className="form-group">
            <label>H∆∞·ªõng d·∫´n t√¨m ƒë∆∞·ªùng</label>
            <textarea
              value={formData.location.accessInstructions}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                location: { ...prev.location, accessInstructions: e.target.value }
              }))}
              placeholder="V√≠ d·ª•: C·ªïng ch√≠nh, t·∫ßng 2, g·ªçi chu√¥ng..."
              rows={2}
            />
          </div>

          <div className="form-group">
            <label>Th·ªùi gian mong mu·ªën</label>
            <input
              type="datetime-local"
              value={formData.scheduledTime}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                scheduledTime: e.target.value
              }))}
              min={new Date().toISOString().slice(0, 16)}
            />
          </div>

          {priceEstimate && (
            <div className="price-estimate">
              <h3>∆Ø·ªõc t√≠nh chi ph√≠</h3>
              <div className="price-range">
                {priceEstimate.priceRange.min.toLocaleString()} - {priceEstimate.priceRange.max.toLocaleString()} VNƒê
              </div>
              <div className="price-factors">
                {priceEstimate.factors.map((factor, idx) => (
                  <div key={idx} className={`factor ${factor.impact}`}>
                    {factor.factor}: {factor.impact === 'increase' ? '+' : ''}{factor.amount.toLocaleString()} VNƒê
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="step-buttons">
            <button className="btn-secondary" onClick={prevStep}>Quay l·∫°i</button>
            <button 
              className="btn-primary" 
              onClick={nextStep}
              disabled={!formData.location.district || !formData.location.fullAddress}
            >
              T√¨m th·ª£
            </button>
          </div>
        </div>
      )}

      {/* Step 3: Worker Selection */}
      {step === 3 && (
        <div className="step-content">
          <h2>Ch·ªçn th·ª£ (t√πy ch·ªçn)</h2>
          <p>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m th·ª£ ph√π h·ª£p nh·∫•t n·∫øu b·∫°n kh√¥ng ch·ªçn</p>

          {/* Auto-assign option */}
          <div className="mb-6">
            <div 
              className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${
                !selectedWorker 
                  ? 'border-blue-500 bg-blue-50' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => setSelectedWorker(null)}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <span className="text-2xl">ü§ñ</span>
                  </div>
                  <div>
                    <div className="font-medium">T·ª± ƒë·ªông ch·ªçn th·ª£ t·ªët nh·∫•t</div>
                    <div className="text-sm text-gray-600">H·ªá th·ªëng s·∫Ω t√¨m th·ª£ g·∫ßn nh·∫•t v√† √≠t vi·ªác nh·∫•t</div>
                  </div>
                </div>
                <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                  Khuy·∫øn ngh·ªã
                </div>
              </div>
            </div>
          </div>

          {/* Worker availability component */}
          {formData.scheduledTime && currentService && (
            <WorkerAvailability 
              serviceId={currentService._id}
              selectedDate={formData.scheduledTime}
              onWorkerSelect={setSelectedWorker}
            />
          )}

          <div className="step-buttons mt-6">
            <button className="btn-secondary" onClick={prevStep}>Quay l·∫°i</button>
            <button className="btn-primary" onClick={nextStep}>
              {selectedWorker ? `Ch·ªçn ${selectedWorker.name}` : 'T·ª± ƒë·ªông ch·ªçn th·ª£'}
            </button>
          </div>
        </div>
      )}

      {/* Step 4: Confirmation */}
      {step === 4 && (
        <div className="step-content">
          <h2>X√°c nh·∫≠n ƒë·∫∑t d·ªãch v·ª•</h2>
          
          <div className="booking-summary">
            <div className="summary-section">
              <h3>D·ªãch v·ª•</h3>
              <p>{serviceTypes.find(s => s.value === formData.serviceDetails.type)?.label}</p>
              <p>{formData.serviceDetails.issueDescription}</p>
              <p>M·ª©c ƒë·ªô: {urgencyOptions.find(u => u.value === formData.serviceDetails.urgency)?.label}</p>
            </div>

            <div className="summary-section">
              <h3>ƒê·ªãa ch·ªâ</h3>
              <p>{formData.location.fullAddress}</p>
              <p>{formData.location.ward}, {formData.location.district}</p>
              {formData.scheduledTime && (
                <p>Th·ªùi gian: {new Date(formData.scheduledTime).toLocaleString('vi-VN')}</p>
              )}
            </div>

            <div className="summary-section">
              <h3>Th·ª£ ƒë∆∞·ª£c ch·ªçn</h3>
              <p>{selectedWorker ? selectedWorker.name : 'T·ª± ƒë·ªông ch·ªçn th·ª£ t·ªët nh·∫•t'}</p>
            </div>

            {priceEstimate && (
              <div className="summary-section">
                <h3>Chi ph√≠ ∆∞·ªõc t√≠nh</h3>
                <div className="final-price">
                  {priceEstimate.estimatedPrice.toLocaleString()} VNƒê
                </div>
                <small>*Gi√° cu·ªëi c√πng c√≥ th·ªÉ thay ƒë·ªïi t√πy theo t√¨nh tr·∫°ng th·ª±c t·∫ø</small>
              </div>
            )}
          </div>

          <div className="form-group">
            <label>Ghi ch√∫ th√™m</label>
            <textarea
              value={formData.note}
              onChange={(e) => setFormData(prev => ({ ...prev, note: e.target.value }))}
              placeholder="Ghi ch√∫ ƒë·∫∑c bi·ªát cho th·ª£..."
              rows={2}
            />
          </div>

          <div className="step-buttons">
            <button className="btn-secondary" onClick={prevStep}>Quay l·∫°i</button>
            <button 
              className="btn-primary btn-confirm" 
              onClick={bookService}
              disabled={loading}
            >
              {loading ? 'ƒêang ƒë·∫∑t d·ªãch v·ª•...' : 'X√°c nh·∫≠n ƒë·∫∑t d·ªãch v·ª•'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ServiceBooking;