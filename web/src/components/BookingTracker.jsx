import React, { useState, useEffect } from 'react';
import axios from 'axios';
import io from 'socket.io-client';

const BookingTracker = ({ bookingId }) => {
  const [booking, setBooking] = useState(null);
  const [socket, setSocket] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Initialize socket connection
    const newSocket = io();
    setSocket(newSocket);

    // Load booking details
    loadBookingDetails();

    // Socket event listeners
    newSocket.on('worker_location_update', (data) => {
      if (data.bookingId === bookingId) {
        setBooking(prev => ({
          ...prev,
          tracking: {
            ...prev.tracking,
            workerLocation: data.workerLocation,
            estimatedArrival: data.estimatedArrival
          }
        }));
      }
    });

    newSocket.on('booking_status_update', (data) => {
      if (data.bookingId === bookingId) {
        setBooking(prev => ({
          ...prev,
          status: data.status,
          timeline: { ...prev.timeline, ...data.timeline }
        }));
      }
    });

    return () => {
      newSocket.disconnect();
    };
  }, [bookingId]);

  const loadBookingDetails = async () => {
    try {
      const response = await axios.get(`/api/enhanced/booking/${bookingId}/tracking`);
      setBooking(response.data.booking);
    } catch (error) {
      console.error('Load booking error:', error);
      alert(UI_MESSAGES.USERS.BOOKING_LOAD_ERROR);
    } finally {
      setLoading(false);
    }
  };

  const getStatusInfo = (status) => {
    const statusMap = {
      pending: { text: 'ƒêang t√¨m th·ª£', color: 'orange', icon: 'üîç' },
      assigned: { text: 'ƒê√£ c√≥ th·ª£ nh·∫≠n vi·ªác', color: 'blue', icon: 'üë®‚Äçüîß' },
      confirmed: { text: 'Th·ª£ ƒë√£ x√°c nh·∫≠n', color: 'green', icon: '‚úÖ' },
      in_progress: { text: 'ƒêang th·ª±c hi·ªán', color: 'purple', icon: 'üîß' },
      completed: { text: 'Ho√†n th√†nh', color: 'green', icon: '‚úÖ' },
      cancelled: { text: 'ƒê√£ h·ªßy', color: 'red', icon: '‚ùå' }
    };
    return statusMap[status] || { text: status, color: 'gray', icon: '‚ùì' };
  };

  const formatTime = (date) => {
    if (!date) return 'Ch∆∞a x√°c ƒë·ªãnh';
    return new Date(date).toLocaleString('vi-VN');
  };

  const calculateTimeRemaining = (estimatedArrival) => {
    if (!estimatedArrival) return null;
    
    const now = new Date();
    const eta = new Date(estimatedArrival);
    const diff = eta - now;
    
    if (diff <= 0) return 'ƒê√£ ƒë·∫øn';
    
    const minutes = Math.floor(diff / 60000);
    if (minutes < 60) return `${minutes} ph√∫t`;
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours}h ${remainingMinutes}m`;
  };

  if (loading) {
    return (
      <div className="booking-tracker loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</p>
      </div>
    );
  }

  if (!booking) {
    return (
      <div className="booking-tracker error">
        <h2>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</h2>
        <p>Vui l√≤ng ki·ªÉm tra l·∫°i ID ƒë∆°n h√†ng</p>
      </div>
    );
  }

  const statusInfo = getStatusInfo(booking.status);

  return (
    <div className="booking-tracker">
      {/* Header */}
      <div className="tracker-header">
        <h1>Theo d√µi ƒë∆°n h√†ng</h1>
        <div className="booking-id">#{booking.id.slice(-8)}</div>
      </div>

      {/* Status */}
      <div className={`status-card ${statusInfo.color}`}>
        <div className="status-icon">{statusInfo.icon}</div>
        <div className="status-text">
          <h2>{statusInfo.text}</h2>
          {booking.tracking.estimatedArrival && (
            <p>D·ª± ki·∫øn ƒë·∫øn: {calculateTimeRemaining(booking.tracking.estimatedArrival)}</p>
          )}
        </div>
      </div>

      {/* Worker Info */}
      {booking.worker && (
        <div className="worker-info-card">
          <div className="worker-details">
            <div className="worker-avatar">
              {booking.worker.name.charAt(0)}
            </div>
            <div className="worker-data">
              <h3>{booking.worker.name}</h3>
              <div className="worker-rating">
                ‚≠ê {booking.worker.rating.toFixed(1)} ‚Ä¢ üìû {booking.worker.phone}
              </div>
              {booking.worker.location && (
                <div className="worker-location">
                  üìç {booking.worker.location.district}
                </div>
              )}
            </div>
          </div>
          
          <div className="worker-actions">
            <button 
              className="btn-call"
              onClick={() => window.open(`tel:${booking.worker.phone}`)}
            >
              üìû G·ªçi
            </button>
            <button 
              className="btn-message"
              onClick={() => {/* Open chat modal */}}
            >
              üí¨ Nh·∫Øn tin
            </button>
          </div>
        </div>
      )}

      {/* Map placeholder */}
      {booking.tracking.workerLocation && (
        <div className="map-container">
          <div className="map-placeholder">
            <h3>üó∫Ô∏è V·ªã tr√≠ th·ª£</h3>
            <p>Th·ª£ ƒëang ·ªü: {booking.worker?.location?.district}</p>
            <p>Kho·∫£ng c√°ch: ~{Math.random() * 5 + 1}km</p>
            <small>*T√≠ch h·ª£p Google Maps s·∫Ω hi·ªÉn th·ªã v·ªã tr√≠ th·ª±c t·∫ø</small>
          </div>
        </div>
      )}

      {/* Timeline */}
      <div className="timeline-card">
        <h3>L·ªãch s·ª≠ ƒë∆°n h√†ng</h3>
        <div className="timeline">
          <div className={`timeline-item ${booking.timeline.createdAt ? 'completed' : ''}`}>
            <div className="timeline-dot"></div>
            <div className="timeline-content">
              <h4>ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o</h4>
              <p>{formatTime(booking.timeline.createdAt)}</p>
            </div>
          </div>

          <div className={`timeline-item ${booking.timeline.assignedAt ? 'completed' : ''}`}>
            <div className="timeline-dot"></div>
            <div className="timeline-content">
              <h4>Th·ª£ ƒë∆∞·ª£c ph√¢n c√¥ng</h4>
              <p>{formatTime(booking.timeline.assignedAt)}</p>
            </div>
          </div>

          <div className={`timeline-item ${booking.timeline.confirmedAt ? 'completed' : ''}`}>
            <div className="timeline-dot"></div>
            <div className="timeline-content">
              <h4>Th·ª£ x√°c nh·∫≠n nh·∫≠n vi·ªác</h4>
              <p>{formatTime(booking.timeline.confirmedAt)}</p>
            </div>
          </div>

          <div className={`timeline-item ${booking.timeline.startedAt ? 'completed' : ''}`}>
            <div className="timeline-dot"></div>
            <div className="timeline-content">
              <h4>B·∫Øt ƒë·∫ßu th·ª±c hi·ªán</h4>
              <p>{formatTime(booking.timeline.startedAt)}</p>
            </div>
          </div>

          <div className={`timeline-item ${booking.timeline.completedAt ? 'completed' : ''}`}>
            <div className="timeline-dot"></div>
            <div className="timeline-content">
              <h4>Ho√†n th√†nh</h4>
              <p>{formatTime(booking.timeline.completedAt)}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Service Details */}
      <div className="service-details-card">
        <h3>Chi ti·∫øt d·ªãch v·ª•</h3>
        <div className="service-info">
          <div className="info-row">
            <span className="label">Lo·∫°i d·ªãch v·ª•:</span>
            <span className="value">{booking.serviceDetails.type}</span>
          </div>
          <div className="info-row">
            <span className="label">V·∫•n ƒë·ªÅ:</span>
            <span className="value">{booking.serviceDetails.issueDescription}</span>
          </div>
          <div className="info-row">
            <span className="label">ƒê·ªãa ch·ªâ:</span>
            <span className="value">{booking.location.fullAddress}</span>
          </div>
          <div className="info-row">
            <span className="label">Qu·∫≠n:</span>
            <span className="value">{booking.location.district}</span>
          </div>
        </div>
      </div>

      {/* Pricing */}
      <div className="pricing-card">
        <h3>Chi ph√≠</h3>
        <div className="pricing-breakdown">
          {booking.pricing.breakdown?.map((item, idx) => (
            <div key={idx} className="pricing-row">
              <span className="item">{item.item}</span>
              <span className={`amount ${item.amount < 0 ? 'discount' : ''}`}>
                {item.amount < 0 ? '' : '+'}{item.amount.toLocaleString()} VNƒê
              </span>
            </div>
          ))}
          <div className="pricing-total">
            <span className="total-label">T·ªïng c·ªông:</span>
            <span className="total-amount">{booking.pricing.finalPrice.toLocaleString()} VNƒê</span>
          </div>
        </div>
      </div>

      {/* Action buttons based on status */}
      <div className="action-buttons">
        {booking.status === 'pending' && (
          <button className="btn-cancel" onClick={() => {/* Cancel booking */}}>
            H·ªßy ƒë∆°n h√†ng
          </button>
        )}
        
        {booking.status === 'completed' && (
          <>
            <button className="btn-review" onClick={() => {/* Open review modal */}}>
              ‚≠ê ƒê√°nh gi√° th·ª£
            </button>
            <button className="btn-rebook" onClick={() => {/* Rebook same service */}}>
              üîÑ ƒê·∫∑t l·∫°i d·ªãch v·ª•
            </button>
          </>
        )}
      </div>

      {/* Emergency contact */}
      <div className="emergency-contact">
        <p>C·∫ßn h·ªó tr·ª£? Li√™n h·ªá: <a href="tel:1900xxx">1900 XXX XXX</a></p>
      </div>
    </div>
  );
};

export default BookingTracker;